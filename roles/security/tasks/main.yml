---
# Optimized Security Role - Consolidated Security Hardening
# All kernel security parameters consolidated here

- name: Install security packages
  ansible.builtin.package:
    name: "{{ security_packages }}"
    state: present
  tags: [security, packages]

- name: Configure consolidated kernel security parameters
  when: security_kernel_hardening
  tags: [security, kernel]
  block:
    - name: Apply kernel security settings
      ansible.posix.sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
        reload: true
        sysctl_file: /etc/sysctl.d/99-security-hardening.conf
      loop: "{{ security_kernel_params[security_compliance_level] | dict2items }}"

- name: Configure audit logging
  when: security_enable_audit
  tags: [security, audit]
  block:
    - name: Configure auditd daemon
      ansible.builtin.template:
        src: auditd.conf.j2
        dest: /etc/audit/auditd.conf
        mode: '0640'
        backup: true
      notify: Restart auditd

    - name: Configure basic audit rules
      ansible.builtin.template:
        src: audit.rules.j2
        dest: /etc/audit/rules.d/security.rules
        mode: '0640'
        backup: true
      notify: Restart auditd

    - name: Enable auditd service
      ansible.builtin.systemd_service:
        name: auditd
        state: started
        enabled: true

- name: Secure critical system files
  when: security_harden_filesystem
  tags: [security, filesystem]
  block:
    - name: Set secure permissions on critical files
      ansible.builtin.file:
        path: "{{ item.path }}"
        owner: "{{ item.owner | default('root') }}"
        group: "{{ item.group | default('root') }}"
        mode: "{{ item.mode }}"
      loop: "{{ security_critical_files }}"

- name: Configure security limits
  when: security_enable_limits
  tags: [security, limits]
  block:
    - name: Apply security limits
      community.general.pam_limits:
        domain: "{{ item.domain }}"
        limit_type: "{{ item.type }}"
        limit_item: "{{ item.item }}"
        value: "{{ item.value }}"
      loop: "{{ security_limits[security_compliance_level] }}"

- name: Disable unused services
  when: security_disable_unused_services
  tags: [security, services]
  block:
    - name: Stop and disable unused services
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        state: stopped
        enabled: false
      loop: "{{ security_unused_services }}"
      failed_when: false

- name: Display security configuration
  ansible.builtin.debug:
    msg:
      - "Security hardening applied successfully"
      - "Compliance level: {{ security_compliance_level }}"
      - "Kernel parameters: {{ security_kernel_params[security_compliance_level] | length }}"
      - "Audit logging: {{ 'Enabled' if security_enable_audit else 'Disabled' }}"
      - "File system hardening: {{ 'Enabled' if security_harden_filesystem else 'Disabled' }}"
      - "Security limits: {{ 'Enabled' if security_enable_limits else 'Disabled' }}"
  tags: [security, info]
